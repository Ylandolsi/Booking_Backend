// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250607191810_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Users.EmailVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_email_verification_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_email_verification_tokens_user_id");

                    b.ToTable("email_verification_tokens", "public");
                });

            modelBuilder.Entity("Domain.Users.Entities.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("university");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_educations");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_educations_user_id");

                    b.ToTable("educations", "public");
                });

            modelBuilder.Entity("Domain.Users.Entities.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("company_name");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_experiences");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_experiences_user_id");

                    b.ToTable("experiences", "public");
                });

            modelBuilder.Entity("Domain.Users.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.ToTable("languages", "public");
                });

            modelBuilder.Entity("Domain.Users.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_skills");

                    b.ToTable("skills", "public");
                });

            modelBuilder.Entity("Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.ComplexProperty<Dictionary<string, object>>("EmailAddress", "Domain.Users.Entities.User.EmailAddress#EmailAdress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("email_address_email");

                            b1.Property<bool>("Verified")
                                .HasColumnType("boolean")
                                .HasColumnName("email_address_verified");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Domain.Users.Entities.User.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name_first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name_last_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ProfilePictureUrl", "Domain.Users.Entities.User.ProfilePictureUrl#ProfilePicture", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ProfilePictureLink")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("character varying(256)")
                                .HasColumnName("profile_picture_url_profile_picture_link");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Status", "Domain.Users.Entities.User.Status#Status", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<bool>("IsActive")
                                .HasColumnType("boolean")
                                .HasColumnName("status_is_active");

                            b1.Property<bool>("IsMentor")
                                .HasColumnType("boolean")
                                .HasColumnName("status_is_mentor");
                        });

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.MentorMentee", b =>
                {
                    b.Property<Guid>("MentorId")
                        .HasColumnType("uuid")
                        .HasColumnName("mentor_id");

                    b.Property<Guid>("MenteeId")
                        .HasColumnType("uuid")
                        .HasColumnName("mentee_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.HasKey("MentorId", "MenteeId")
                        .HasName("pk_user_mentors");

                    b.HasIndex("MenteeId")
                        .HasDatabaseName("ix_user_mentors_mentee_id");

                    b.ToTable("user_mentors", "public");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid")
                        .HasColumnName("language_id");

                    b.HasKey("UserId", "LanguageId")
                        .HasName("pk_user_languages");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_user_languages_language_id");

                    b.ToTable("user_languages", "public");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("skill_id");

                    b.Property<int>("ProficiencyLevel")
                        .HasColumnType("integer")
                        .HasColumnName("proficiency_level");

                    b.HasKey("UserId", "SkillId")
                        .HasName("pk_user_skills");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("ix_user_skills_skill_id");

                    b.ToTable("user_skills", "public");
                });

            modelBuilder.Entity("Domain.Users.EmailVerificationToken", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_verification_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.Entities.Education", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_educations_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.Entities.Experience", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_experiences_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.MentorMentee", b =>
                {
                    b.HasOne("Domain.Users.Entities.User", "Mentee")
                        .WithMany("UserMentors")
                        .HasForeignKey("MenteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_mentors_users_mentee_id");

                    b.HasOne("Domain.Users.Entities.User", "Mentor")
                        .WithMany("UserMentees")
                        .HasForeignKey("MentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_mentors_users_mentor_id");

                    b.Navigation("Mentee");

                    b.Navigation("Mentor");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.UserLanguage", b =>
                {
                    b.HasOne("Domain.Users.Entities.Language", "Language")
                        .WithMany("UserLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_languages_languages_language_id");

                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_languages_users_user_id");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.JoinTables.UserSkill", b =>
                {
                    b.HasOne("Domain.Users.Entities.Skill", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_skills_skills_skill_id");

                    b.HasOne("Domain.Users.Entities.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_skills_users_user_id");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.Entities.Language", b =>
                {
                    b.Navigation("UserLanguages");
                });

            modelBuilder.Entity("Domain.Users.Entities.Skill", b =>
                {
                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("Domain.Users.Entities.User", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserMentees");

                    b.Navigation("UserMentors");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
